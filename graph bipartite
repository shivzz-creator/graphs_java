class Solution
{
    static class Pair
    {
        int source;
        int level;
        
        Pair(int s,int l)
        {
            source=s;
            level=l;
        }
    }
    
    public boolean check(ArrayList<ArrayList<Integer>> adj,int node,int[] visited)
    {
        Queue<Pair> q=new LinkedList<>();
        Pair p=new Pair(node,0);
        q.offer(p);
        
        
        while(!q.isEmpty())
        {
            Pair curr=q.poll();
            
            if(visited[curr.source]!=-1)   //if node is visited
            {
                if(curr.level!=visited[curr.source])  //node is visited, now we check if the previously stored level is equal to the current level or notif its not, it means the cycle contains odd number of nodes , therefore its not Bipar.
                    return false;
            }
            
            else
            {
                visited[curr.source]=curr.level;
            }
            
            for(int x : adj.get(curr.source))  //check neighbours of curr
            {
                if(visited[x]==-1)
                {
                    q.add(new Pair(x,curr.level+1));
                }
            }
        }
        return true;
        
    }
    
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>>adj)
    {
        int[] visited=new int[V];
        Arrays.fill(visited,-1);  //-1 denotes unvisited nodes.
        
        for(int i=0;i<V;i++)    //for loop for checking all components(if any).
        {
            if(visited[i]==-1)
            {
                boolean isBipar=check(adj,i,visited);
                if(isBipar==false)
                    return false;
            }
        }
        
        return true;
    }
}
