// { Driver Code Starts
//Initial Template for Java

import java.util.*;
import java.io.*;
import java.lang.*;

class Gfg
{
    public static void main (String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            // arraylist of arraylist to represent graph
            ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
            
            int V = Integer.parseInt(sc.next());
            int E = Integer.parseInt(sc.next());
            
            for(int i =0; i < V; i++)
                adj.add(i, new ArrayList<Integer>());
                
            for(int i = 1; i <= E; i++)
            {    int u = Integer.parseInt(sc.next());
                 int v = Integer.parseInt(sc.next());
                 
                 // adding directed edgese between 
                 // vertex 'u' and 'v'
                 adj.get(u).add(v);
            }
            
            Solution ob = new Solution();
            System.out.println(ob.kosaraju(V, adj));
		}
    }
}
// } Driver Code Ends


//User function Template for Java


class Solution
{
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //topolocial sort
        boolean visited[] = new boolean[V] ;
        Stack<Integer> stack = new Stack<>();
        for(int  i = 0 ; i<V ; i++){
            if(visited[i]==false){
                dfs(i,adj,visited,stack);
            }
        }
        
        int[] ans = new int[V];
        for(int i=0 ; i<V ;i++){
            if(stack.size()>0){
                ans[i]=stack.pop();
            }
        }
        //reverse graph
        
        ArrayList<ArrayList<Integer>> adjR = new ArrayList<>();
        for(int i =0 ; i<V;i++){
            adjR.add(new ArrayList<>());
        }
        
        for(int i = 0 ; i<V ; i++){
             for(Integer node : adj.get(i)){
                 adjR.get(node).add(i);
             }
           
        }
        
        int count = 0 ;
        Arrays.fill(visited,false);
          for(int i= 0 ; i<V ; i++){
            if(visited[ans[i]]==false){
                count++;
                dfs(ans[i],adjR,visited,stack);
            }
        }
        return count;
        
    }
    
    
     public static void dfs(int v , ArrayList<ArrayList<Integer>> adj ,boolean visited[] , Stack<Integer> stack){
       
        visited[v]= true ;
        
        for(Integer node : adj.get(v)){
            if(visited[node]==false){
                dfs(node,adj,visited,stack);
            }
        }
        stack.push(v);
        
    }
}
