class Solution {
    class Pair{
        int i  ;
        int j ;
        Pair(int i , int j ){
            this.i = i ; 
            this.j  = j ;
        
        }
    }
    
    
    
    public int orangesRotting(int[][] grid) {
        int fresh = 0 ;
        Queue<Pair> q = new LinkedList<>();
        for(int i = 0 ; i< grid.length ; i++){
            for(int j=0 ; j<grid[0].length ; j++){
                if(grid[i][j]==1){
                    fresh++ ;
                }
                else if(grid[i][j]==2){
                        q.add(new Pair(i,j)) ;
                
                }
            }
        
        }
        // System.out.println(fresh);
        // System.out.println(q);
            
        
        if(fresh==0) return  0 ;
        if(q.size()==0 && fresh!=0) return -1 ;
                    
            int lev = 0 ;  
            while(q.size()>0){
                int size = q.size() ;
                lev++ ;
                while(size-->0){
                    Pair t = q.remove() ;
                    int i = t.i ;
                    int j = t.j ;
                    
                    if(i+1<grid.length && grid[i+1][j]==1){
                        grid[i+1][j]=2 ;
                        q.add(new Pair(i+1,j));
                        fresh--;
                    }
                     if(i-1>=0 && grid[i-1][j]==1){
                        grid[i-1][j]=2 ;
                        q.add(new Pair(i-1,j));
                        fresh--;
                    }
                    if(j+1<grid[0].length && grid[i][j+1]==1){
                        grid[i][j+1]=2 ;
                        q.add(new Pair(i,j+1));
                        fresh--;
                    }
                     if(j-1>=0 && grid[i][j-1]==1){
                        grid[i][j-1]=2 ;
                        q.add(new Pair(i,j-1));
                        fresh--;
                    }
                    
                    
                }
            }
        if(fresh!=0) return -1 ;
        
        return lev-1 ;
        
        
        
        
        
        
    }
}
