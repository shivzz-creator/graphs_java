import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   
   static class Pair{
       int v;
       int level ;
       
       Pair(int v , int level){
           this.v =v ;
           this.level = level ;
       }
   }
   
        public static boolean isBipartite(ArrayList<Edge>[] graph , int[] visited , int level , int src){
            
            Queue<Pair> q = new LinkedList<>() ;
            q.offer(new Pair(src , level));
            while(q.size()>0){
                Pair t = q.poll();
                if(visited[t.v] !=-1){
                    if(t.level != visited[t.v]){
                        return false ;
                    }
                }else{
                    visited[t.v] = t.level ;
                }
                
                for(Edge e : graph[t.v]){
                    if(visited[e.nbr] ==-1){
                        q.offer(new Pair(e.nbr ,t.level+1 ) );
                    }
                }
               
                
            }
             return true ;
            
            
            
            
            
            
            
            
            
        }
   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      // write your code here
      boolean t =true ;
      int[] visited =  new int[vtces];
      Arrays.fill(visited , -1);
      for(int  i = 0 ; i<vtces ; i++){
            if(visited[i] ==-1){
                boolean res = isBipartite(graph , visited , 0 , i);
                if(res == false){
                    System.out.println(false ); 
                    t=false ;
                    break ;
                }
            }
           
      }
      if(t){
          System.out.println(t);
      }
   }
}
