class Solution
{
    public String findOrder(String [] dict, int N, int K)
    {
        // Write your code here
        
        ArrayList<ArrayList<Integer>> adj  = new ArrayList<>();
        for(int i = 0 ; i<K ; i++){
            adj.add(new ArrayList<Integer>());
        }
        
        for(int i = 1 ; i<N ; i++){
            String a = dict[i];
            String b = dict[i-1];
            int j=0;
            while( j<a.length() && j<b.length() &&  a.charAt(j)== b.charAt(j)){
                j++;
            }
            if(j==a.length() || j==b.length()) continue ;
            int x = a.charAt(j)-'a';
            int y = b.charAt(j)-'a';
            adj.get(y).add(x);
            
            
            
        }
        
        
        int [] topoS = topoSort(K, adj);
            String ans = "";
            for(int iq : topoS){
                ans=ans+(char)(iq+'a');
            }
            return ans;
        

        
        
    }
    
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        boolean visited[] = new boolean[V] ;
        Stack<Integer> stack = new Stack<>();
        for(int  i = 0 ; i<V ; i++){
            if(visited[i]==false){
                dfs(i,adj,visited,stack);
            }
        }
        
        int[] ans = new int[V];
        for(int i=0 ; i<V ;i++){
            if(stack.size()>0){
                ans[i]=stack.pop();
            }
        }
        
        return ans ;
        
        
    }
    
    public static void dfs(int v , ArrayList<ArrayList<Integer>> adj ,boolean visited[] , Stack<Integer> stack){
       
        visited[v]= true ;
        
        for(Integer node : adj.get(v)){
            if(visited[node]==false){
                dfs(node,adj,visited,stack);
            }
        }
        stack.push(v);
        
    }

    
    
}
